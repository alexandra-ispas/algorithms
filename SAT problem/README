Ispas Alexandra-Petrina 322CD alexandra.ispas@stud.acs.upb.ro

#Tema 2 AA

*General:*
Pentru codificarea variabilelor am folosti functia lui Cantor care este implemen-
tata in clasa Task. Pentru oricare 2 numere a si b primite in input, aceasta
genereaza un nou numar, folosind formula: (a + b)*(a+b+1) / 2 + b. De asemenea,
am folosit si functia de decodificare a lui Cantor in care se revine la numerele
initiale, pornind de la numarul-codificare.

*Task:*
În această clasă am declarat variabilele folosite la citire și functia pe care
o folosesc ca să citesc datele pentru task-urile 1 și 2, precum si functiile
folosite la encodarea variabilelor.

*Task1:*
Am folosit reducerea de la k-coloring, la SAT.
In cadrul acestui task, codific fiecare variabila i (1 <= i <= K) si j (1 <=j<=N)
intr-un numar x, astfel incat valuarea 'true' a clauzei obtinute are urmatoarea
seminificatie: spionul cu numarul i este asignat familiei cu numarul j.
Pentru a crea cauzele folosesc 3 conditii, fiecare fiind generata de o grupare
de for-uri. Primul for verifică faptul ca fiecare familie are un spion 
( fiecărui nod din graf ii este asignată o culoare ). Numarul de clauze generat
de acesta este N. Al doilea for genereaza N*(K/2*(K-1)) clauze si impune conditia
ca fiecare familie sa nu aiba mai mult de un spion.Cel de-al treilea for este
folosit pentru a verifica faptul ca oricare 2 familii prietene au spioni diferiti.
Numarul de clauze introduse aici este M*K. Pentru a formula output-ul final,
citesc datele primte de la oracol, iar daca raspunsul este "False", doar afisez
acest mesaj. In caz contrat, citesc si familiile obtinute, pastand numerele
pozitive. Daca un numar este negativ, inseamna ca un nu i se asigneaza un spion
unei anumita familii. Valoarea K corespunzatoare acelei intrari din matrice
reprezinta spionul asignat familiei, prin urmare fisierul de iesire va contine
numarul spionului asignat fiecarei familii in ordine.

*Task2:*
Am folosit reducerea de la clique, la SAT.
Entry-urile Map-ului reprezinta marimea gruparii cautate. Folosesc 3 conditii
pentru a crea clauzele. Prima este ca fiecare nod din graf sa fie conectat printr-o
muchie(fiecare familie sa aiba o relatie cu o alta familie). Aceasta conditie este
impusa prin 2 for-uri ce genereaza K clauze. Cea de-a doua conditie este ca fiecare
familie sa aiba un numar fix de familii prietene si aceasta introduce N*(K*(K-1))/2
clauze. Ultimul for este folosit pentru a impune conditia ca oricare 2 familii
care nu se inteleg sa nu fie incluse impreuna in grupare (oricare 2 noduri
neadiacente nu pot fi amandoua incluse in clique) si are NumarDeNoduriNeadiacent*K*K
clauze corespunzatoare. Pentru realizarea fisierului de output final, citesc datele
primite de la oracol si, pentru fiecare numar pozitiv, scriu index-ul din matrice
care semnifica numarul familiei ce face parte din gruparea de dimensiune K.

*Task3:*
Am folosit reducerea de la vertex cover, la clique.
La citirea datelor de intrate i-am asignat lui K valoarea N-1 pentru a incepe sa
caut un grup de familii prietene cu dimensiunea maxima. Deoarece in task2 se face
cautarea unui grup care este format din cat mai multe familii prietene, apelul
task-ului 2 va primi, pe post de familii prietene, familiile care nu se inteleg.
Pentru a realiza reducerea la task2, completez fisierull task2InFilename. Acesta
va contine valorile N, M si K. N este numarul total de familii, M reprezinta
numarul de muchii neexistente in graful initial (numarul de grupari de cate 2
familii care nu sunt prietene), fiind lungimea matricei 'nonfriends', iar K este
initial N/2+1 si se schimba la fiecare apel recursiv al task-ului 2 pana cand se
gaseste o grupare formata din K familii inamice. Din task2OutFilename se obtin
acele familii care formeaza cea mai mare grupare de familii inamice, prin urmare
acestea sunt cele care trebuie pastrate, iar restul arestate. In fisierul final
vor aparea familiile care trebuie sa fie arestate. Complexitatea acestui task
este mult mai mare, avand un apel recursiv catre task-ul 2 si 2 scrieri in fisier.

*Bonus:*
Am folosit reducerea de la minimum vertex cover la weighted partial Max-SAT.
In rezolvarea acestui task am folosit o functie ('getNumberOfConnections') pentru
a crea un Map ce contine ca si entry-uri toate familiile din sistem si stocheaza
in values toate familiile care au o relatie cu familia din entry.
Variabila top este 'hardcodata' printr-o formula gasita de mine pentru a nu aduna
toate costurile clauzelor soft si sa ingreunez programul. Exista M+N clauze.
M clauze sunt hard si au greutatea egala cu top, fiind reprezentate de perechile
de familii, (muchiile din graf). Clauzele soft (in numar de N) sunt compuse din
familii, avand ca si greutate numarul de familii care nu au o relatie cu acestea.
Astfel, dupa interogarea oracolului, se vor obtine cu semn pozitiv acele familii
care trebuie arestate, adica pe cele care alcatuiesc cea mai mare grupare de
familii prietene.
